<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
		<!ENTITY % darktable_dtd SYSTEM "../dtd/darktable.dtd">
		%darktable_dtd;
		]>
<sect1 status="final" id="darktable_and_memory">

  <title>darktable and memory</title>

  <indexterm>
    <primary>memory setup</primary>
  </indexterm>

  <para>
    darktable's memory requirements are high. A simple calculation makes this clear. If you have
    a 20MPix image, darktable for precision reasons will store this internally as a 4 x 32-bit
    floating point cell for each pixel. Each full image of this size will need about 300MB of
    memory. As we want to process the image, we will at least need two buffers for each module
    &nbsp;&ndash; one for input and one for output. If we have a more complex module, its
    algorithm might additionally require several intermediate buffers of the same size. Without
    further optimization, anything between 600MB and 3GB would be needed only to store and
    process image data. On top we have darktable's code segment, the code and data of all
    dynamically linked system libraries, and not to forget further buffers where darktable
    stores intermediate images for quick access during interactive work (mip map cache). All in
    all, darktable would like to see a minimum of about 4GB to run happily.
  </para>

  <sect2 status="final" id="darktable_and_memory_system">

    <title>Total system memory</title>

    <para>
      From what I said before, it is evident that your computer needs a sane memory setup to
      properly run darktable. We suggest that you have a least 4GB of physical RAM plus 4 to 8GB
      of additional swap space installed. The latter is required, so that your system can swap
      out temporarily unneeded data to disk in order to free physical RAM.
    </para>

    <para>
      Theoretically, you could also run darktable with lower amounts of physical RAM and balance
      this with enough swap space. However, you should be prepared that your system could then
      heavily <quote>thrash</quote>, as it reads or writes data pages to and from the hard disk.
      We have positive reports that this functions well for several users, but it still might
      get extremely slow for others...
    </para>

  </sect2>

  <sect2 status="final" id="darktable_and_memory_space">

    <title>Available address space</title>

    <para>
      Besides the total amount of system memory there is another limiting factor: the available
      address space of your hardware architecture. How much memory can be addressed by a process
      depends on the number of address bits your CPU offers. For a CPU with 32-bit address
      registers, this is 2^32 bytes, which makes a total of 4GB. This is the absolute upper
      limit of memory that can be used by a process and it constitutes a tight situation for
      darktable as we have seen above.
    </para>

    <para>
      darktable's escape route is called tiling. Instead of processing an image in one big
      chunk, we split the image into smaller parts for every processing step (module). This will
      still require one full input and output buffer, but intermediate buffers can be made small
      enough to have everything fit into the hardware limits.
    </para>

  </sect2>

  <sect2 status="final" id="darktable_and_memory_fragmentation">

    <title>Memory fragmentation</title>

    <para>
      Unfortunately this is not the full story yet. There is an effect called memory
      fragmentation, which can and will hit software that needs to do extensive memory
      management. If such a program allocates 5 times 300MB at a time and frees it again, that
      memory should normally be available for one big 1.5GB allocation afterwards. This however
      is often not the case. The system's memory allocator may no longer see this area as one
      contiguous 1.5GB block but as a row of 300MB areas. If there is no other free area of
      1.5GB available, the allocation would fail. During a program run this mechanism will take
      away more and more of the larger memory blocks in favor of smaller ones. darktable 2.0 mip
      map cache allocates several small memory blocks per each thumbnail, so this problem is
      even bigger. For this reason, as of darktable 2.0, 32-bit support is soft-deprecated.
    </para>

  </sect2>

  <sect2 status="final" id="darktable_and_memory_limitations">

    <title>Further limitations</title>

    <para>
      As if this were not challenging enough, there are further things that might limit your
      access to memory. On some older boards you need to activate BIOS option <quote>memory
      remapping</quote> in order to have all physically installed memory enabled. In addition if
      you are on a 32-bit OS you will probably need a kernel version that has <quote>Physical
      Address Extension</quote> (PAE) enabled. This is often but not always the case for Linux.
      Many distributions deliver different kernels, some with and some without PAE activated;
      you need to choose the right one. To check if the system is setup correctly, use the
      command <quote>free</quote> in a terminal and examine the output. If the output reports
      less RAM than you have installed, you have an issue needing correction; for example you
      have 4GB on your board, but your kernel is only seeing 3GB or less. You need to consult
      your BIOS manual and the information about your Linux variant for further help.
    </para>

  </sect2>

  <sect2 status="final" id="darktable_and_memory_32bit">

    <title>Setting up darktable on 32-bit systems</title>

    <indexterm>
      <primary>memory setup</primary>
      <secondary>32-bit systems</secondary>
    </indexterm>

    <indexterm>
      <primary>tiling</primary>
    </indexterm>

    <para>
      As we've seen 32-bit systems are difficult environments for darktable. Still some users
      are running darktable on them, if the basic requirements in terms of total system memory
      and the topics mentioned in the paragraphs above are addressed properly.
    </para>

    <para>
      There are several adjustment parameters to get it running. If you install fresh, darktable
      will detect your system and set conservative values by default. However, if you upgrade
      darktable from an older version (e.g. coming from 0.9.3 and going to 1.0), chances are you
      have unfavorable settings in your preferences. The consequences might be darktable
      aborting due to allocation failures or&nbsp;&ndash; very typically&nbsp;&ndash; darktable
      not being able to properly import a new film roll. As a frequent symptom you get skulls
      displayed instead of thumbs for many of your pictures.
    </para>

    <para>
      If this is the case, take a minute to optimize the preference settings in this case. You
      will find them under <quote>core options</quote> (<xref linkend="core_options"/>) in
      darktable's preference dialog. You should also find these parameters as configuration
      variables in $HOME/.config/darktable/darktablerc and edit them there.
    </para>

    <para>
      Here is a short explanation of the relevant parameters and their proposed settings:
      <variablelist>

        <varlistentry>

          <term>number of background threads</term>

          <listitem><para>
            This parameter defines the maximum number of threads that are allowed in parallel
            when importing film rolls or doing other background stuff. For obvious reasons on
            32-bit systems you can only have one thread eating resources at a time. So you need
            set this parameter to 1; anything higher will kill you.
          </para></listitem>

        </varlistentry>

        <varlistentry>

          <term>host memory limit (in MB) for tiling</term>

          <listitem><para>
            This parameter tells darktable how much memory (in MB) it should assume is available
            to store image buffers during module operations. If an image can not be processed
            within these limits in one chunk, tiling will take over and process the image in
            several parts, one after the other. Set this to the lowest possible value of 500 as
            a starting point. You might experiment later whether you can increase it a bit in
            order to reduce the overhead of tiling.
          </para></listitem>

        </varlistentry>

        <varlistentry>

          <term>minimum amount of memory (in MB) for a single buffer in tiling</term>

          <listitem><para>
            This is a second parameter that controls tiling. It sets a lower limit for the size
            of intermediate image buffers in megabytes. The parameter is needed to avoid
            excessive tiling in some cases (for some modules). Set this parameter to a low value
            of 8. You might tentatively increase it to 16 later.
          </para></listitem>

        </varlistentry>

        <varlistentry>

          <term>memory in megabytes to use for thumbnail cache</term>

          <listitem><para>
            This controls how many thumbnails (or mip maps) can be stored in memory at a time.
            As a starting point set this to something like 256MB. Since darktable 2.0, the cache
            does allocate a few small buffers per each thumbnail in cache, thus causing
            significant memory fragmentation. As explained before, this poses a problem for
            32-bit systems. For this reason, as of darktable 2.0, 32-bit support is
            soft-deprecated.
          </para></listitem>

        </varlistentry>

      </variablelist>
    </para>

  </sect2>

  <sect2 status="final" id="darktable_and_memory_64bit">

    <title>darktable on 64-bit systems</title>

    <indexterm>
      <primary>memory setup</primary>
      <secondary>64-bit systems</secondary>
    </indexterm>

    <para>
      There's not much to be said here. Of course also 64-bit systems require a sufficient
      amount of main memory, so the 4GB plus swap recommendation holds true. On the other hand,
      64-bit architectures do not suffer from the specific 32-bit limitations like small address
      space and fragmentation madness.
    </para>

    <para>
      Most modern Intel or AMD 64-bit CPUs will have available address space in the range of
      several Terabytes. The word <quote>modern</quote> is relative in this context: all AMD and
      Intel CPUs introduced since 2003 and 2004, respectively, offer a 64-bit mode. Linux 64-bit
      has been available for many years.
    </para>

    <para>
      All relevant Linux distributions give you the choice to install a 32-bit or a 64-bit
      version with no added costs. You can even run old 32-bit binaries on a 64-bit Linux. The
      only thing you need to do: invest some time into the migration. In the end we strongly
      recommend moving to a 64-bit version of Linux. There really is no reason not to upgrade to
      64-bit.
    </para>

    <para>
      On a 64-bit system you can safely leave the tiling related configuration parameters at
      their defaults: <quote>host memory limit (in MB) for tiling</quote> should have a value of
      1500 and <quote>minimum amount of memory (in MB) for a single buffer in tiling</quote>
      should be set to 16. In case you are migrating from a 32-bit to a 64-bit system you will
      need to check these settings and manually change them if needed in darktable's preference
      dialog.
    </para>

    <para>
      Typically there is no need to restrict oneself in the number of background threads on a
      64-bit system. On a multi-processor system a number of two to eight threads can speed up
      thumbnail generation considerably versus only one thread. The reason is not so much taking
      maximum advantage of all your CPU cores&nbsp;&ndash; darktable's pixelpipe anyhow uses all
      of them in parallel&nbsp;&ndash; but hiding I/O latency.
    </para>

    <indexterm>
      <primary>panoramas</primary>
    </indexterm>

    <indexterm>
      <primary>stitched panoramas</primary>
    </indexterm>

    <para>
      One exception is worth to be mentioned. If you use darktable to process stitched
      panoramas, e.g. TIFFs as generated by Hugin, these images can reach considerable sizes.
      Each background thread needs to allocate enough memory to keep one full image plus
      intermediates and output in its buffers. This may quickly run even a well equipped 64-bit
      system out of memory. In that case lower the number of background threads to only one.
    </para>

  </sect2>

</sect1>
