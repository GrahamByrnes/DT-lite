<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
		<!ENTITY % darktable_dtd SYSTEM "../../dtd/darktable.dtd">
		%darktable_dtd;
		]>
<sect2 status="final" id="thumbnails">

  <title>Thumbnails</title>

  <indexterm>
    <primary>thumbnails</primary>
  </indexterm>

  <para>
    Each image of the current collection is represented by a thumbnail in the lighttable view.
    darktable keeps a cache of the last recently used thumbnails in a file on disk and loads it
    into memory at startup. The size of this cache can be adjusted in the core preferences
    dialog (see <xref linkend="core_options"/>).
  </para>

  <sect3 status="final" id="thumbnail_creation">

    <title>Thumbnail creation</title>

    <para>
      Thumbnails get created whenever darktable imports an image for the first time, after an
      image has been modified in the darkroom, or when revisiting an <quote>old</quote> image
      whose thumbnail is no longer available.
    </para>

    <para>
      When darktable imports an image for the first time, there are two possible sources from
      where to take a thumbnail. darktable can either try to extract an embedded thumbnail out
      of the input image&nbsp;&ndash; most raw files contain these kind of thumbnails generated
      by the camera&nbsp;&ndash; or process the image by itself using default settings. You can
      define how darktable gets its thumbnails in the GUI preferences dialog (see
      <xref linkend="gui_options"/>).
    </para>

    <para>
      Extracting an embedded thumbnail from the input image has the advantage of being very
      fast. However, those thumbnails have been generated by the raw converter of the camera and
      do not represent darktable's <quote>view</quote> of that image. You will notice the
      difference as soon as you open the image in the darkroom mode, after which darktable
      replaces the embedded thumbnail with its own one.
    </para>

    <para>
      After importing a new film roll darktable generates thumbnails for new images as they are
      needed. In the case of a larger set of new images this slows down navigation in the
      lighttable view as with each move new thumbnails might need to be produced. Alternatively
      you may terminate darktable and start the <filename>darktable-generate-cache</filename>
      binary. This program will generate all missing thumbnails in one go. For more details see
      <xref linkend="darktable_generate_cache_commandline_parameters"/>.
    </para>

    <para>
      As the thumbnail cache file has a pre-defined maximum size it will eventually get filled
      up. Then if new thumbnails are added, old ones need to be dropped. However, darktable will
      keep all thumbnails on disk if the corresponding disk backend option is activated in the
      core preferences dialog (see <xref linkend="core_options"/>). Access to the thumbnails in
      this secondary cache is slower than to the ones in the primary cache, but still much
      faster than reprocessing thumbnails from scratch. The size of the secondary cache is only
      limited by disk space.
    </para>

    <para>
      Thumbnails never get dropped from the secondary cache. In case you want to clean it up you
      can do so manually by deleting all images recursively in folder
      <filename>$HOME/.cache/darktable/mipmaps-xyz.d</filename> where <filename>xyz</filename>
      denotes an alphanumeric identifier of the cache. Afterwards you let darktable re-generate
      thumbnails as needed, or you generate all thumbnails in one go with
      <filename>darktable-generate-cache</filename>.
    </para>

    <para>
      If you don't activate the disk backend and select a too small cache size you might observe
      adverse effects. Continuous regeneration of thumbnails whenever you move in your
      collection, flickering of thumbnail images, or even darktable becoming unresponsive are
      typical symptoms. A good choice of the cache size is 512MB or higher. Please mind that the
      inherent limits of <emphasis>32-bit systems</emphasis> will force you to go for a much
      lower cache size (see <xref linkend="darktable_and_memory"/> for more details on these
      limitations).
    </para>

    <para>
      Starting with darktable 2.0 thumbnails are fully color managed if the corresponding option
      is activated in the core preferences dialog (see <xref linkend="core_options"/>). Colors
      are rendered accurately on screen as long as your system is properly set up to hand over
      the right monitor profile to darktable. For more information on color management see
      <xref linkend="color_management"/>.
    </para>

  </sect3>

  <sect3 status="final" id="skulls">

    <title>Skulls</title>

    <indexterm>
      <primary>skulls</primary>
    </indexterm>

    <para>
      <informaltable frame="none">
        <tgroup cols="2" colsep="0" rowsep="0">
          <colspec colwidth="6*"/>
          <colspec colwidth="4*"/>
          <tbody>
            <row>
              <entry>
                <para>
                  If for some reason darktable is not able to generate a thumbnail, it displays
                  a skull. Don't panic!
                </para>
              </entry>
              <entry>
                <graphic fileref="lighttable/concepts/images/thumbnails_1.png" scalefit="1" width="80%" align="center" />
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>

    <para>
      There are three main reasons for this to happen.
    </para>

    <para>
      One possible cause is that the input image has been renamed or physically deleted from
      disk. darktable remembers all images ever imported, as long as they have not been removed
      from your database. In case darktable wants to create a thumbnail but is not able to open
      the input file, a skull is displayed instead. Users are advised to remove images from the
      database (see <xref linkend="selected_images"/>) <emphasis>before</emphasis> physically
      removing them from disk. Alternatively you may occasionally run the script
      <filename>purge_non_existing_images.sh</filename> from darktable's toolset to clean-up
      your database.
    </para>

    <para>
      Another possible cause is sometimes darktable encounters an input image having an
      extension that seems valid for darktable but which has a file format that darktable does
      not support yet. darktable tries to process the image but is not able to get the job done.
    </para>

    <para>
      The third possible cause for getting skulls is memory shortage: If darktable runs out of
      memory while generating a thumbnail, it will warn you and display a skull&nbsp;&ndash;
      this can happen if darktable is run with suboptimal settings, especially on a 32-bit
      system. Please consult <xref linkend="darktable_and_memory"/> for more information.
    </para>

  </sect3>

</sect2>
